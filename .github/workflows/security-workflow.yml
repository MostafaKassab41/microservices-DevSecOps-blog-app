name: DevSecOps Pipeline

on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

    workflow_dispatch:

jobs:
  # Phase 1: Semgrep SAST
  semgrep-sast:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        continue-on-error: true
        with:
          config: p/default
          
      - name: Scan Complete
        if: always()
        run: |
          echo "✅ Semgrep scan completed"
          echo "Findings are shown above for review"
          echo "Build continues regardless of findings"


  # Phase 2: SonarQube SAST
  sonar-scan:
    name: SonarQube Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Install dependencies for all services
        run: |
            for dir in app-services/*; do
            if [ -f "$dir/package.json" ]; then
                echo "Installing dependencies in $dir"
                (cd "$dir" && npm ci)
            fi
            done

      - name: Debug SonarQube Connection
        run: |
          echo "SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}"
          # Test basic connectivity 
          if curl -v $SONAR_HOST_URL/api/server/version | grep "200 OK"; then
            echo "✅ SonarQube server is reachable"
          else
            echo "❌ Cannot reach SonarQube server"
          fi

          # Test with your token
          if curl -u $SONAR_TOKEN: $SONAR_HOST_URL/api/server/version | grep "200 OK"; then
            echo "✅ Testing SonarQube server and Token is successful"
          else
            echo "❌ Testing SonarQube server and Token is not successful"
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Check Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        continue-on-error: true
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}



  # Phase 3: Trivy Security Scanning
  trivy-security-scans:
    name: Security Scan - All Services
    runs-on: ubuntu-latest
    needs: [semgrep-sast, sonar-scan]
    strategy:
      matrix:
        service: [client, comments, event-bus, moderation, posts, query]  
        scan-type: [sca, container]  # Run both SCA and container scans
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: SCA Scan for ${{ matrix.service }}
        if: matrix.scan-type == 'sca'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './app-services/${{ matrix.service }}'
          format: 'table'
          exit-code: 0
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Build ${{ matrix.service }} Docker Image
        if: matrix.scan-type == 'container'
        run: docker build -t ${{ matrix.service }}-service:${{ github.sha }} ./app-services/${{ matrix.service }}
      
      - name: Container Scan for ${{ matrix.service }}
        if: matrix.scan-type == 'container'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: '${{ matrix.service }}-service:${{ github.sha }}'
          format: 'table'
          exit-code: 0
          severity: 'CRITICAL,HIGH'

  trivy-config:
    name: Trivy Config Files Scan
    runs-on: ubuntu-latest
    needs: [semgrep-sast, sonar-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy Config Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './app-services'  # Scan all config files
          format: 'table'
          exit-code: 0
          severity: 'CRITICAL,HIGH'


  # Phase 4: OWASP ZAP DAST
  zap-dast:
    name: OWASP ZAP DAST
    runs-on: ubuntu-latest
    needs: [semgrep-sast, sonar-scan]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build and Deploy
        run: docker compose -f app-services/docker-compose.yml up -d --build

      - name: Health Check
        id: healthcheck
        run: |
          echo "Waiting for application to be healthy..."
          for i in {1..30}; do
            if curl -s -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
              exit 0
            fi
            echo "⏳ Application not ready yet (attempt $i/30)"
            sleep 10
          done
          echo "❌ Application failed to become healthy"
          exit 1

      - name: Run OWASP ZAP Baseline Scan
        if: steps.healthcheck.outcome == 'success'
        uses: zaproxy/action-baseline@v0.10.0
        continue-on-error: true
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a -I'

      - name: Tear Down
        if: always()
        run: docker compose -f app-services/docker-compose.yml down
      

  

  # Final Summary
  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [semgrep-sast, sonar-scan, trivy-security-scans, zap-dast]
    if: always()
    steps:
      - name: Generate Comprehensive Report
        run: |
          echo "## 🔒 DevSecOps Pipeline Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Security Scans Performed:" >> $GITHUB_STEP_SUMMARY
          echo "✅ **SAST** - Semgrep (Code patterns)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **SAST** - SonarQube (Code quality)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **SCA** - Trivy (Dependencies)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Container** - Trivy (Docker image)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Config** - Trivy (Configuration files)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **DAST** - OWASP ZAP (Runtime testing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review findings from each scan above" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix CRITICAL/HIGH severity issues first" >> $GITHUB_STEP_SUMMARY